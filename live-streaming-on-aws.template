Description: '(SO0013) - Live Streaming on AWS'

Parameters:

  Code:
    Description: Select the Code Base to use to deploy the media services.
    Type: String
    AllowedValues:
      - NodeJS-8.10
      - Python-3.6

  Console:
    Description: Deploy the demo console (preview player) to Amazon S3
    Type: String
    Default: Yes
    AllowedValues:
      - Yes
      - No

  InputType:
    Description: Specify the input type for MediaLive (Default parametrs are for the Demo video)
    Type: String
    Default: URL_PULL
    AllowedValues:
      - RTP_PUSH
      - RTMP_PUSH
      - RTMP_PULL
      - URL_PULL
      - MEDIACONNECT

  InputCodec:
    Description: Specify the codec of the source stream for MediaLive (AVC/HEVC/MPEG2)
    Type: String
    Default: AVC
    AllowedValues:
      - AVC
      - HEVC
      - MPEG2

  InputRes:
    Description: Specify the Encoding Profile to use for MediaLive
    Type: String
    Default: 720
    AllowedValues:
      - 1080
      - 720
      - 540

  InputCIDR:
    Description: Specify the CIDR Block for the MediaLive SecurityGroup
    Type: String
    Default: ""

  PriPullURL:
    Description: Specify the primary source URL for the PULL input stream
    Type: String
    Default: "https://d15an60oaeed9r.cloudfront.net/live_stream_v2/sports_reel_with_markers.m3u8"

  PriPullUser:
    Description: (Optional) Specify a Username for the primary source URL
    Type: String
    Default: ""

  PriPullPass:
    Description: (Optional) Specify a Password for the primary source URL
    Type: String
    Default: ""
    NoEcho: true

  SecPullURL:
    Description: Specify the secondary source URL for the PULL input stream
    Type: String
    Default: "https://d3h5srgm8b0t83.cloudfront.net/live_stream_v2/sports_reel_with_markers.m3u8"

  SecPullUser:
    Description: (Optional) Specify a Username for the secondary source URL
    Type: String
    Default: ""

  SecPullPass:
    Description: (Optional) Specify a Username for the secondary source URL
    Type: String
    Default: ""
    NoEcho: true

  PriMediaConnectArn:
    Description: (Optional) Specify the Arn for MediaConnect as a source
    Type: String
    Default: ""

  SecMediaConnectArn:
    Description: (Optional) Specify the Arn for MediaConnect as a source
    Type: String
    Default: ""

  ChannelStart:
    Description: Start the Live Channel as part of the deployment
    Type: String
    Default: Yes
    AllowedValues:
      - Yes
      - No

Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
            -
              Label:
                default: Deployment Options
              Parameters:
                - Code
                - Console
            -
              Label:
                default: Live Stream Source
              Parameters:
                - InputType
                - InputCodec
                - InputRes
                - ChannelStart
            -
              Label:
                default: For PUSH Source Types
              Parameters:
                - InputCIDR
            -
              Label:
                default: For PULL Source Types
              Parameters:
                - PriPullURL
                - PriPullUser
                - PriPullPass
                - SecPullURL
                - SecPullUser
                - SecPullPass
            -
              Label:
                default: MediaConnect Source Type
              Parameters:
                - PriMediaConnectArn
                - SecMediaConnectArn

        ParameterLabels:
          InputType:
            default: Source Input Type
          InputCodec:
            default: Source Codec
          InputRes:
            default: Encoding Profile
          InputCIDR:
            default: Input CIDR Block
          PriPullURL:
            default: Primary Source URL
          PriPullUser:
            default: Primary Source Username
          PriPullPass:
            default: Primary Source Password
          SecPullURL:
            default: Secondary Source URL
          SecPullUser:
            default: Secondary Source Username
          SecPullPass:
            default: Secondary Source Password
          Console:
            default: Demo Console
          Code:
            default: Source Code
          PriMediaConnectArn:
            default: Primary MediaConnect Arn
          SecMediaConnectArn:
            default: Secondary MediaConnect Arn
          ChannelStart:
            default: Start MediaLive Channel

Mappings:
  SourceCode:
    General:
      S3Bucket: solutions
      KeyPrefix: live-streaming-on-aws/v2.2.1

  AnonymousData:
    SendAnonymousData:
      Data: Yes

Conditions:
    Metrics: !Equals [ !FindInMap [AnonymousData,SendAnonymousData,Data], Yes]
    Demo: !Equals [ !Ref Console , Yes ]
    CodeBase: !Equals [!Ref Code, NodeJS-8.10]
    Start: !Equals [ !Ref ChannelStart , Yes ]

Resources:

  CustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-custom-resource"
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join ["", ["arn:aws:logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/aws/lambda/*"]]
              -
                Effect: Allow
                Action:
                  - medialive:createInputSecurityGroup
                  - medialive:describeInput
                  - medialive:createInput
                  - medialive:deleteInput
                  - medialive:stopChannel
                  - medialive:createChannel
                  - medialive:deleteChannel
                  - medialive:deleteInputSecurityGroup
                  - medialive:describeChannel
                  - medialive:startChannel
                  - medialive:tagResource
                  # feature/P20903447 support deleting input security group &
                  # start channel

                Resource:
                    - !Join ["", ["arn:aws:medialive:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":*"]]
              -
                Effect: Allow
                Action:
                  - mediapackage:createChannel
                  - mediapackage:deleteChannel
                  - mediapackage:listOriginEndpoints
                  - mediapackage:deleteOriginEndpoint
                  - mediapackage:createOriginEndpoint

                Resource:
                    - !Join ["", ["arn:aws:mediapackage:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":*"]]
              -
                Effect: Allow
                Action:
                  - ssm:PutParameter
                Resource:
                  - !Join ["", ["arn:aws:ssm:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":parameter/*"]]
              -
                Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  -  !GetAtt MediaLiveRole.Arn

  MediaLiveRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - "medialive.amazonaws.com"
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-mediatranscode-role"
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - ssm:DescribeParameters
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:PutParameter
                Resource:
                  - !Join ["", ["arn:aws:ssm:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":parameter/*"]]
              # feature/P20903447 MediaConnect support
              -
                Effect: Allow
                Action:
                  - mediaconnect:ManagedDescribeFlow
                  - mediaconnect:ManagedAddOutput
                  - mediaconnect:ManagedRemoveOutput
                Resource:
                  - !Join ["", ["arn:aws:mediaconnect:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":*"]]

  CustomResource:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-livestream-custom-resources
      Description: Used to deploy custom resources and send AnonymousData
      Handler: !If [CodeBase, index.handler, lambda.handler]
      Role: !GetAtt CustomResourceRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  !If ["CodeBase", "custom-resource-js.zip", "custom-resource-py.zip"]]]
      Runtime:  !If [CodeBase, nodejs8.10, python3.6]
      Timeout: 180

  MediaPackageChannel:
    Type: Custom::MediaPackageChannel
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: MediaPackageChannel
      ChannelId: !Sub ${AWS::StackName}-livestream

  MediaPackageHlsEndpoint:
    DependsOn: MediaPackageChannel
    Type: Custom::MediaPackageHlsEndpoint
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: MediaPackageEndPoint
      EndPoint: HLS
      ChannelId: !GetAtt MediaPackageChannel.ChannelId

  MediaPackageDashEndpoint:
    DependsOn: MediaPackageChannel
    Type: Custom::MediaPackageDashEndpoint
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: MediaPackageEndPoint
      EndPoint: DASH
      ChannelId: !GetAtt MediaPackageChannel.ChannelId

  MediaPackageMssEndpoint:
    DependsOn: MediaPackageChannel
    Type: Custom::MediaPackageMssEndpoint
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: MediaPackageEndPoint
      EndPoint: MSS
      ChannelId: !GetAtt MediaPackageChannel.ChannelId

  MediaPackageCmafEndpoint:
    DependsOn: MediaPackageChannel
    Type: Custom::MediaPackageCmafEndpoint
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: MediaPackageEndPoint
      EndPoint: CMAF
      ChannelId: !GetAtt MediaPackageChannel.ChannelId

  MediaLiveInput:
    Type: Custom::MediaLiveInput
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: MediaLiveInput
      StreamName: !Sub ${AWS::StackName}-livestream
      Type: !Ref InputType
      Cidr: !Ref InputCIDR
      PriUrl: !Ref PriPullURL
      PriUser: !Ref PriPullUser
      PriPass: !Ref PriPullPass
      SecUrl: !Ref SecPullURL
      SecUser: !Ref SecPullUser
      SecPass: !Ref SecPullPass
      RoleArn: !GetAtt MediaLiveRole.Arn
      PriMediaConnectArn: !Ref PriMediaConnectArn
      SecMediaConnectArn: !Ref SecMediaConnectArn

  MediaLiveChannel:
    DependsOn: MediaLiveInput
    DependsOn: MediaPackageChannel
    Type: Custom::MediaLiveChannel
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: MediaLiveChannel
      Name: !Sub ${AWS::StackName}-livestream
      Resolution: !Ref InputRes
      Codec: !Ref InputCodec
      Role: !GetAtt MediaLiveRole.Arn
      InputId: !GetAtt MediaLiveInput.Id
      Type: !Ref InputType
      MediaPackagePriUrl: !GetAtt MediaPackageChannel.PrimaryUrl
      MediaPackagePriUser: !GetAtt MediaPackageChannel.PrimaryUser
      # FEATURE/P15424610 Dual ingest support for MediaPackage
      MediaPackageSecUrl: !GetAtt MediaPackageChannel.SecondaryUrl
      MediaPackageSecUser: !GetAtt MediaPackageChannel.SecondaryUser

  MediaLiveChannelStart:
    DependsOn: MediaLiveChannel
    Condition: Start
    Type: Custom::MediaLiveChannelStart
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: MediaLiveChannelStart
      ChannelId: !GetAtt MediaLiveChannel.ChannelId

  CloudFront:
    DependsOn: MediaPackageChannel
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: mediapackage
            DomainName: !GetAtt MediaPackageHlsEndpoint.DomainName
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
        Enabled: 'true'
        DefaultCacheBehavior:
          TargetOriginId: mediapackage
          SmoothStreaming: 'false'
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: 'true'
            Cookies:
              Forward: all
            Headers:
              - Access-Control-Allow-Origin
              - Access-Control-Request-Method
              - Access-Control-Request-Header
          ViewerProtocolPolicy: allow-all
        ViewerCertificate:
          CloudFrontDefaultCertificate: 'true'
      Tags:
        - Key: MP-Endpoint-ARN
          Value: !GetAtt MediaPackageChannel.Arn

  LogsBucket:
    DeletionPolicy: Retain
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite

  # Demo Assets

  DemoBucket:
    Condition: Demo
    DeletionPolicy: Retain
    Type: 'AWS::S3::Bucket'
    Properties:
      LoggingConfiguration:
        DestinationBucketName: !Ref LogsBucket
        LogFilePrefix: demo_bucket/

  DemoBucketPolicy:
    Condition: Demo
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref DemoBucket
      PolicyDocument:
        Statement:
          -
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt DemoOriginAccessIdentity.S3CanonicalUserId
            Action: 's3:GetObject'
            Resource: !Join ["", ["arn:aws:s3:::", Ref: "DemoBucket", "/*"]]

  DemoOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "access-identity-${DemoBucket}"

  DemoCloudFront:
      Type: AWS::CloudFront::Distribution
      Properties:
          DistributionConfig:
              Comment: "Website distribution for solution"
              Origins:
                  -
                    Id: S3-solution-website
                    DomainName: !Sub "${DemoBucket}.s3.${AWS::Region}.amazonaws.com"
                    OriginPath: /console
                    S3OriginConfig:
                        OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${DemoOriginAccessIdentity}"
              DefaultCacheBehavior:
                  TargetOriginId: S3-solution-website
                  AllowedMethods:
                      - GET
                      - HEAD
                      - OPTIONS
                      - PUT
                      - POST
                      - PATCH
                      - DELETE
                  CachedMethods:
                      - GET
                      - HEAD
                      - OPTIONS
                  ForwardedValues:
                      QueryString: 'false'
                  ViewerProtocolPolicy: redirect-to-https
              IPV6Enabled: 'true'
              DefaultRootObject: "index.html"
              CustomErrorResponses:
                - ErrorCode: '404'
                  ResponsePagePath: "/index.html"
                  ResponseCode: '200'
                - ErrorCode: '403'
                  ResponsePagePath: "/index.html"
                  ResponseCode: '200'
              ViewerCertificate:
                  CloudFrontDefaultCertificate: 'true'
              Enabled: 'true'
              HttpVersion: 'http2'

  DemoIamPolicy:
    Condition: Demo
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "livestreamDemoPolicy"
      Roles:
        - Ref: "CustomResourceRole"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: "Allow"
            Action:
              - s3:putObject
              - s3:deleteObject
              - s3:deleteBucket
            Resource:
              - !Join ["", ["arn:aws:s3:::", Ref: "DemoBucket"]]
              - !Join ["", ["arn:aws:s3:::", Ref: "DemoBucket", "/*" ]]
          -
            Effect: "Allow"
            Action:
              - s3:getObject
            Resource:
              - !Join ["", ["arn:aws:s3:::",!FindInMap ["SourceCode", "General", "S3Bucket"], "-", Ref: "AWS::Region"]]
              - !Join ["", ["arn:aws:s3:::",!FindInMap ["SourceCode", "General", "S3Bucket"], "-", Ref: "AWS::Region","/*"]]

  DemoConsole:
    Condition: Demo
    DependsOn: DemoIamPolicy
    Type: Custom::DemoDeloy
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: DemoConsole
      SrcBucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
      SrcPath: !FindInMap ["SourceCode", "General", "KeyPrefix"]
      DemoBucket: !Ref DemoBucket
      Exports:
        !Sub |
          //Configuration file generated by cloudformation
          'us strict'
          const exports = {
            mediaLiveConsole: 'https://console.aws.amazon.com/medialive/home?region=${AWS::Region}#/channels/${MediaLiveChannel.ChannelId}',
            hls_manifest: 'https://${CloudFront.DomainName}/out/v1${MediaPackageHlsEndpoint.Manifest}',
            dash_manifest: 'https://${CloudFront.DomainName}/out/v1${MediaPackageDashEndpoint.Manifest}',
            mss_manifest: 'https://${CloudFront.DomainName}/out/v1${MediaPackageMssEndpoint.Manifest}',
            cmaf_manifest: 'https://${CloudFront.DomainName}/out/v1${MediaPackageCmafEndpoint.Manifest}'
          }

  # Metrics
  Uuid:
    Condition: Metrics
    Type: "Custom::UUID"
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: UUID

  AnonymousMetric:
    Condition: Metrics
    Type: "Custom::AnonymousMetric"
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: AnonymousMetric
      SolutionId: "SO0013"
      UUID: !GetAtt Uuid.UUID
      Version: "2.0"
      InputType: !Ref InputType
      InputCodec: !Ref InputCodec
      InputRes: !Ref InputRes
      Console: !Ref Console
      Code: !Ref Code

Outputs:
  UUID:
    Condition: Metrics
    Description: AnonymousMetric UUID
    Value: !GetAtt Uuid.UUID

  MediaLivePrimaryEndpoint:
    Description: Primary MediaLive input Url
    Value: !GetAtt MediaLiveInput.EndPoint1

  MediaLiveSecondaryEndpoint:
    Description: Secondary MediaLive input Url
    Value: !GetAtt MediaLiveInput.EndPoint2

  CloudFrontHlsEnpoint:
    Description: HLS CloudFront URL
    Value: !Sub https://${CloudFront.DomainName}/out/v1${MediaPackageHlsEndpoint.Manifest}

  CloudFrontDashEnpoint:
    Description: DASH CloudFront URL
    Value: !Sub https://${CloudFront.DomainName}/out/v1${MediaPackageDashEndpoint.Manifest}

  CloudFrontMssEnpoint:
    Description: MSS CloudFront URL
    Value: !Sub https://${CloudFront.DomainName}/out/v1${MediaPackageMssEndpoint.Manifest}

  CloudFrontCmafEnpoint:
      Description: CMAF CloudFront URL
      Value: !Sub https://${CloudFront.DomainName}/out/v1${MediaPackageCmafEndpoint.Manifest}

  DemoConsole:
    Condition: Demo
    Description: Demo Player URL
    Value: !Sub https://${DemoCloudFront.DomainName}/index.html
